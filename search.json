[{"path":"https://pkg.mitchelloharawild.com/graphvec/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 graphvec authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mitchell O'Hara-Wild. Author, maintainer.","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"O'Hara-Wild M (2024). graphvec: Vectorised graph data structures. R package version 0.0.0.9000.","code":"@Manual{,   title = {graphvec: Vectorised graph data structures},   author = {Mitchell O'Hara-Wild},   year = {2024},   note = {R package version 0.0.0.9000}, }"},{"path":"https://pkg.mitchelloharawild.com/graphvec/index.html","id":"graphvec","dir":"","previous_headings":"","what":"Vectorised graph data structures","title":"Vectorised graph data structures","text":"graphvec package extends vectors include graph relationships unique values, offers tools compute useful summaries graph structure use summarising, filtering, otherwise manipulating graph.","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Vectorised graph data structures","text":"can install development version graphvec GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"mitchelloharawild/graphvec\")"},{"path":"https://pkg.mitchelloharawild.com/graphvec/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Vectorised graph data structures","text":"agg_vec() (aggregation vector) defines simple hierarchical graph structure single parent node. graph_vec() (graph vector) defines general graph structure relationships among levels factor specified adjacency list. vectors particularly useful used rectangular tidy data structures.","code":"library(graphvec) agg_vec(   x = c(NA, \"A\", \"B\"),   aggregated = c(TRUE, FALSE, FALSE) ) #> <agg_vec[3]> #> [1] <aggregated> A            B library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union g <- graph_vec(   x = factor(c(\"A\", \"B\", \"C\", \"D\", \"D\", \"E\")),   g = tibble(     from = list(c(1L, 3L), c(2L, 4L)),     to = c(2L, 5L)   ) )  g #> [1] A B C D D E #> attr(,\"g\") #> # A tibble: 2 x 2 #>          from    to #>   <list<int>> <int> #> 1         [2]     2 #> 2         [2]     5 #> Levels: A B C D E node_is_child(g, \"B\") #> [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE x <- tibble(g, y = rnorm(6)) x #> # A tibble: 6 x 2 #>   g          y #>   <fct>  <dbl> #> 1 A      0.358 #> 2 B      0.430 #> 3 C     -1.12  #> 4 D      1.03  #> 5 D     -1.21  #> 6 E      0.918 x |>    filter(node_is_child(g, \"B\")) #> # A tibble: 3 x 2 #>   g          y #>   <fct>  <dbl> #> 1 A      0.358 #> 2 B      0.430 #> 3 C     -1.12 x |>    mutate(node_degree(g)) #> # A tibble: 6 x 3 #>   g          y `node_degree(g)` #>   <fct>  <dbl>            <dbl> #> 1 A      0.358                1 #> 2 B      0.430                3 #> 3 C     -1.12                 1 #> 4 D      1.03                 1 #> 5 D     -1.21                 1 #> 6 E      0.918                2"},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/agg_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an aggregation vector — agg_vec","title":"Create an aggregation vector — agg_vec","text":"maturing","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/agg_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an aggregation vector — agg_vec","text":"","code":"agg_vec(x = character(), aggregated = logical(vec_size(x)))"},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/agg_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an aggregation vector — agg_vec","text":"x vector values. aggregated logical vector identify values <aggregated>.","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/agg_vec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an aggregation vector — agg_vec","text":"aggregation vector extends usual vectors adding <aggregated> values. vectors typically produced via aggregate_key() function, however can useful create manually produce complicated hierarchies (unbalanced hierarchies).","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/agg_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an aggregation vector — agg_vec","text":"","code":"agg_vec(   x = c(NA, \"A\", \"B\"),   aggregated = c(TRUE, FALSE, FALSE) ) #> <agg_vec[3]> #> [1] <aggregated> A            B"},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/aggregation-vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vctrs methods — aggregation-vctrs","title":"Internal vctrs methods — aggregation-vctrs","text":"methods extensions allow aggregation vectors work vctrs.","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/aggregation-vctrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal vctrs methods — aggregation-vctrs","text":"","code":"# S3 method for class 'agg_vec' vec_ptype2(x, y, ...)  # S3 method for class 'agg_vec.agg_vec' vec_ptype2(x, y, ...)  # S3 method for class 'agg_vec.default' vec_ptype2(x, y, ...)  # S3 method for class 'agg_vec.character' vec_ptype2(x, y, ...)  # S3 method for class 'character.agg_vec' vec_ptype2(x, y, ...)  # S3 method for class 'agg_vec' vec_ptype_abbr(x, ...)  # S3 method for class 'agg_vec' vec_cast(x, to, ...)  # S3 method for class 'agg_vec.agg_vec' vec_cast(x, to, ...)  # S3 method for class 'agg_vec.default' vec_cast(x, to, ...)  # S3 method for class 'character.agg_vec' vec_cast(x, to, ...)  # S3 method for class 'agg_vec' vec_proxy_compare(x, ...)  # S3 method for class 'edge_vec' vec_ptype2(x, y, ...)  # S3 method for class 'edge_vec.default' vec_ptype2(x, y, ...)  # S3 method for class 'edge_vec.character' vec_ptype2(x, y, ...)  # S3 method for class 'edge_vec' vec_cast(x, to, ...)  # S3 method for class 'edge_vec.edge_vec' vec_cast(x, to, ...)  # S3 method for class 'edge_vec.default' vec_cast(x, to, ...)  # S3 method for class 'character.edge_vec' vec_cast(x, to, ...)  # S3 method for class 'edge_vec' vec_ptype_abbr(x, ...)  # S3 method for class 'graph_vec' vec_ptype2(x, y, ...)  # S3 method for class 'graph_vec.default' vec_ptype2(x, y, ...)  # S3 method for class 'graph_vec.character' vec_ptype2(x, y, ...)  # S3 method for class 'graph_vec' vec_cast(x, to, ...)  # S3 method for class 'graph_vec.graph_vec' vec_cast(x, to, ...)  # S3 method for class 'graph_vec.default' vec_cast(x, to, ...)  # S3 method for class 'character.graph_vec' vec_cast(x, to, ...)  # S3 method for class 'graph_vec.character' vec_cast(x, to, ...)  # S3 method for class 'graph_vec' vec_ptype_abbr(x, ...)"},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/edge_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph vectors with edge-first design (EXPERIMENTAL) — edge_vec","title":"Graph vectors with edge-first design (EXPERIMENTAL) — edge_vec","text":"Graph vectors edge-first design (EXPERIMENTAL)","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/edge_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph vectors with edge-first design (EXPERIMENTAL) — edge_vec","text":"","code":"edge_vec(from, to, nodes, key = 1L)"},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/graphvec-package.html","id":null,"dir":"Reference","previous_headings":"","what":"graphvec: Vectorised graph data structures — graphvec-package","title":"graphvec: Vectorised graph data structures — graphvec-package","text":"Extends vectors include graph relationships unique values, offers tools compute useful summaries graph structure use summarising, filtering, otherwise manipulating graph.","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/graphvec-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"graphvec: Vectorised graph data structures — graphvec-package","text":"Maintainer: Mitchell O'Hara-Wild mail@mitchelloharawild.com (ORCID)","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/is_aggregated.html","id":null,"dir":"Reference","previous_headings":"","what":"Is the element an aggregation of smaller data — is_aggregated","title":"Is the element an aggregation of smaller data — is_aggregated","text":"element aggregation smaller data","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/is_aggregated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is the element an aggregation of smaller data — is_aggregated","text":"","code":"is_aggregated(x)"},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/is_aggregated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is the element an aggregation of smaller data — is_aggregated","text":"x object.","code":""},{"path":[]},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/node_degree.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the degree of a node in a graph — node_degree","title":"Identify the degree of a node in a graph — node_degree","text":"Identify degree node graph","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/node_degree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the degree of a node in a graph — node_degree","text":"","code":"node_degree(x, ...)"},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/node_degree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the degree of a node in a graph — node_degree","text":"x graph vector","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/node_disjoint_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify disjoint graphs by node — node_disjoint_id","title":"Identify disjoint graphs by node — node_disjoint_id","text":"Identify disjoint graphs node","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/node_disjoint_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify disjoint graphs by node — node_disjoint_id","text":"","code":"node_disjoint_id(x, ...)"},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/node_disjoint_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify disjoint graphs by node — node_disjoint_id","text":"x graph","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/node_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the distance from a node in a graph — node_distance","title":"Identify the distance from a node in a graph — node_distance","text":"Identify distance node graph","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/node_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the distance from a node in a graph — node_distance","text":"","code":"node_distance(x, from, ...)"},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/node_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the distance from a node in a graph — node_distance","text":"x graph vector","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/node_is_child.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the children of a node in a graph — node_is_child","title":"Identify the children of a node in a graph — node_is_child","text":"Identify children node graph","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/node_is_child.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the children of a node in a graph — node_is_child","text":"","code":"node_is_child(x, node, ...)"},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/node_is_child.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the children of a node in a graph — node_is_child","text":"x graph vector node root node children identified","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/traverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Recursively traverse an object — traverse","title":"Recursively traverse an object — traverse","text":"Recursively traverse object","code":""},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/traverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recursively traverse an object — traverse","text":"","code":"traverse(   x,   .f = list,   .g = identity,   .h = identity,   base = function(.x) is_syntactic_literal(.x) || is_symbol(.x) )"},{"path":"https://pkg.mitchelloharawild.com/graphvec/reference/traverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recursively traverse an object — traverse","text":"x object traverse .f function combining recursed components .g function applied object recursion .h function applied base case base base case recursion","code":""}]
